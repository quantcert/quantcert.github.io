#!/bin/bash
####################################################################################
# Copyright (C) 2024 Axel Muller and Alain Giorgetti                               #
# Université de Franche-Comté, CNRS, institut FEMTO-ST, F-25000 Besançon, France   #
####################################################################################
# This software is distributed under the terms of the GNU Lesser                   #
# General Public License version 2.1                                               #
####################################################################################

D1=$1;D2=$2

#path=${D2:-"/dev/null"}
if [[ "${path}" = "0" ]]; then path="/dev/null"; fi
header=${@:1}

my_invocation="$(printf %q "$BASH_SOURCE")$((($#)) && printf ' %q' "$@")"


if [[ -z $1 ]] || [[ $1 -lt 2 ]] || [[ $1 -gt 31 ]] #if the arguments are incorrect
then
    echo;echo "Usage: $0 QUBITS_NUMBER CONFIGURATION [OPTIONS] [--solver SOLVER]";   
    if [[ $1 == "--help" ]]
    then
        echo -n "
Qontextium is a program which estimates the contextuality degree of quantum configurations.

Parameters:

QUBITS_NUMBER:                         the number of qubits in the configuration

CONFIGURATION:                         the configuration to be generated. It can be one of the following:

    --import assignment [FILE]:        import a configuration assignment from a file
    --import hypergram [FILE1] [FILE2]:import a hypergraph from two files (hypergraph + gram matrix)
    --elliptic [--complement|--all]:   generate a elliptic configuration (or their complement or all of them)
    --hyperbolic [--complement|--all]: generate a hyperbolic configuration (or their complement or all of them)
    --perpset [--complement]:          generate a perpset configuration (or their complement or all of them)
    --subspaces k:                     generates a configuration with subspaces of dimension k as contexts
    --affine:                          generate affine configurations

SOLVER

    --solver sat:                      use a SAT solver to estimate the contextuality degree (eventually gives the optimum)
    --solver heuristic:                use a heuristic to estimate the contextuality degree (faster, but no guarantee of finding the optimum)
    --solver retrieve:                 checks a solution from a solution code

GRAPH VISUALIZATION MODES

There are multiple filters you can use to visualize the contextual graphs :

NOTHING
- This filter always returns false, meaning no lines will pass through this filter. It effectively filters out all lines.

ALL
- This filter always returns true, meaning all lines will pass through this filter.

POINT DEGREE
- This filter checks if any of the points in the geometry (for the given line i) match a specific point degree specified by the user.

OBSERVABLE VALUE
- This filter checks if any of the points in the geometry for the line i match a specific observable value given by the user

LINE DEGREE
- This filter checks if the sorted degrees of the points in the geometry for each line exactly match the degrees specified by the user

SYMMETRIC
- This filter checks if all points in the geometry for line i are symmetric. An observable is symmetric if the number of Y's is even.

";
    echo
    else
        echo;echo "type $0 --help for more information";echo
    fi
    exit
fi

if ! command -v flex &> /dev/null;then echo "flex lexer needed !";fi
if ! command -v bison &> /dev/null;then echo "bison parser needed !";fi

make -s all

#&& \
time ./main.out $header #> $path

#remove all the temporary files if the program was terminated before the end
rm -f .tmp[0-9]*.txt .tmp[0-9]*.log .bak[0-9]*.txt .bak[0-9]*.log

#echo "%% Do not modify this file. It is automatically generated from $my_invocation in src/c"
#$(cat $path)" > $path
