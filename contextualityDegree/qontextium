#!/bin/bash
####################################################################################
# Copyright (C) 2024 Axel Muller and Alain Giorgetti                               #
# Université de Franche-Comté, CNRS, institut FEMTO-ST, F-25000 Besançon, France   #
####################################################################################
# This software is distributed under the terms of the GNU Lesser                   #
# General Public License version 2.1                                               #
####################################################################################

D1=$1;D2=$2

#path=${D2:-"/dev/null"}
if [[ "${path}" = "0" ]]; then path="/dev/null"; fi
header=${@:1}

my_invocation="$(printf %q "$BASH_SOURCE")$((($#)) && printf ' %q' "$@")"

#if there is no first argument 
if [[ -z $1 ]] 
then
    echo;echo "Usage: $0 CONFIGURATION [OPTIONS] [--solver SOLVER] [--export VAL] [--no-interaction]";   
fi
if [[ $1 == "--help" ]]
then
    echo -n "
Qontextium is a program which estimates the contextuality degree of quantum configurations.

Parameters:
    --export [all|valid|invalid]:         exports the requested contexts to the standard output in the CSV format
    --no-interaction:                     disables the interaction with the user (useful for scripts)

CONFIGURATION:                            the configuration to be generated. It can be one of the following:

    --import assignment [FILE]:           import a configuration assignment from a file
    --import hypergram [FILE1] [FILE2]:   import a hypergraph from two files (hypergraph + gram matrix)
    --import gram [FILE1]:                import a hypergraph from a gram matrix with all its possible hyperedges
    --elliptic n [--complement|--all]:    generates a n qubit elliptic configuration (or their complement or all of them)
    --hyperbolic n [--complement|--all]:  generates a n qubit hyperbolic configuration (or their complement or all of them)
    --perpset n [--complement]:           generates a n qubit perpset configuration (or their complement or all of them)
    --subspaces k n:                      generates a n qubit configuration with subspaces of dimension k as contexts
    --affine n:                           generates n qubit affine configurations
    --hexagon [skew] [--complement|--all]:generates classical or skew embeddings of split cayley hexagons

SOLVER

    --solver sat:                         use a SAT solver to estimate the contextuality degree (eventually gives the optimum)
    --solver heuristic:                   use a heuristic to estimate the contextuality degree (faster, but no guarantee of finding the optimum)
    --solver retrieve:                    checks a solution from a solution code

OTHER OPTIONS

    --heuristic-iter n:                     the number n of iterations for the heuristic solver (default: 10000)
    --heuristic-threshold n:                the threshold n for the heuristic solver (default: different values per thread)
    --heuristic-flip-prob n:                the probability n of flipping a bit for the heuristic solver (default: 0.99)

GRAPH VISUALIZATION MODES

There are multiple filters you can use to visualize the contextual graphs :

NOTHING
- This filter always returns false, meaning no lines will pass through this filter. It effectively filters out all lines.

ALL
- This filter always returns true, meaning all lines will pass through this filter.

POINT DEGREE
- This filter checks if any of the points in the geometry (for the given line i) match a specific point degree specified by the user.

OBSERVABLE VALUE
- This filter checks if any of the points in the geometry for the line i match a specific observable value given by the user

LINE DEGREE
- This filter checks if the sorted degrees of the points in the geometry for each line exactly match the degrees specified by the user

SYMMETRIC
- This filter checks if all points in the geometry for line i are symmetric. An observable is symmetric if the number of Y's is even.

";
    exit
fi

if ! command -v flex &> /dev/null;then echo "flex lexer needed !";fi
if ! command -v bison &> /dev/null;then echo "bison parser needed !";fi

make -s all

#&& \
time ./main.out $header #> $path

#remove all the temporary files if the program was terminated before the end
rm -f .tmp[0-9]*.txt .tmp[0-9]*.log .bak[0-9]*.txt .bak[0-9]*.log

#echo "%% Do not modify this file. It is automatically generated from $my_invocation in src/c"
#$(cat $path)" > $path
